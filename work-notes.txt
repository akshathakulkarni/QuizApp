This file contains the notes that we (Stéphane and Akshatha, the developers) have taken for this project.

Oct. 21:
I have written each quiz's link as a 6-character alphanumeric string, like in Tinyapp. That way we can take the generateRandomString function from Tinyapp and put it in the form for creating a new quiz, when the time comes to do so.
Perhaps the next step after we've established our database is to make a homepage with some hardcoded dummy elements for quizzes. We'll want a nice header to go in every page as well, i imagine that can be an EJS file?
- Stéphane

Oct. 22:
Here are some functions i've drafted for the SQL queries we'll need. Variables are obviously subject to change depending on what we end up defining in other places.

****

const makeNewQuiz = function(data, user) {
  const title = data.title;
  const unlisted = data.unlisted;
  const userID = user.id;
  const link = generateRandomString();
  return pool
  .query(`INSERT INTO quizzes (title, author_id, unlisted, link) VALUES ($1, $2, $3, $4) RETURNING *`,
  [title, userID, unlisted, link])
  .catch(e => console.log(e));
}

const makeNewQuestion = function(data) {
  const quizID = data.quiz_id;
  const query = data.query;
  const correct = data.correct;
  const wrong1 = data.wrong1;
  const wrong2 = data.wrong2;
  const wrong3 = data.wrong3;
  const queryParams = [quizID, query, correct, wrong1, wrong2, wrong3];
  const queryString = `INSERT INTO questions (quiz_id, query, correct_answer, wrong_1, wrong_2, wrong_3) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *;`;
  return pool.query(queryString, queryParams)
  .then((res) => {
    const questionID = res.questions.id; //or whatever this ends up being
    return pool.query(`INSERT INTO quizzes_questions (quiz_id, question_id) VALUES ($1, $2) RETURNING *;`,
    [quizID, questionID])
    .catch(e => console.log(e));
  })
}

const checkAnswer = function(ans) {
  const query = ans.query;
  const answer = ans.answer;
  const queryString = `SELECT COUNT(*) FROM questions WHERE query = $1 AND correct_answer = $2`;
  return pool.query(queryString, [query, answer])
  .then(res => {
    if (res.number === 1) { // or whatever this is
      return true;
    }
    return false;
  })
  .catch(e => console.log(e));
}

const recordAttempt = function(data) {
  const userID = data.user_id;
  const quizID = data.quiz_id;
  const score = data.score;
  const link = generateRandomString();
  const queryString = `INSERT INTO attempts (user_id, quiz_id, score, link) VALUES ($1, $2, $3, $4) RETURNING *;`;
  const queryParams = [userID, quizID, score, link];
  return pool.query(queryString, queryParams).catch(e => console.log(e));
}

*****

Trying to figure out the workflow here:

Quiz attempt is submitted
POST route for this particular attempt is handled (how? I guess use a post route in server or smth idk)
In POST route, call the SQL query
SQL query inserts quiz attempt into database
.then res.redirect to this particular quiz attempt with the unique link

Question is - how do we get the file with the GET and POST routes to recognize the pool?
I guess the fulcrum for that would be server.js?

New quiz is made
POST route for this particular quiz is handled
Route calls two different functions: makeNewQuiz and makeNewQuestion, the latter in a for loop
They call all the necessary SQL queries
then res.redirect to this quiz with unique link

Little hiccup:
if we're going to make a new quiz or attempt and the POST route is going to handle the quiz with its own unique link,
then that link has to be made with generateRandomString BEFORE it gets to the POST route
(do we have any documents that handle front end functions yet? this might be a good place to start)

^ oh wait no we don't need that, because the POST request is just going to either quizzes or attempts, not the link;
the link created on the back end will be redirected to from within the back end

So much to do, where to start??

For the element creator functions: we probably don't need escape like we did on Tweeter, since it's all going through the back end
which already has escape stuff set up with the $ in the SQL queries

My feeble attempt at a to-do list:
- Find out where front end functions are handled, make element creator functions there
- Somehow hook them up to the back end with GET/POST requests and SQL queries
- Figure out how to make new-text forms without IDs, so there can be multiple question fields
- Make an event listener for "add another question" that somehow appends new input elements with unique IDs
- Figure out how to get the SQL data on the front end in the first place
- Figure out how to arrange multiple choice answers randomly
- Figure out how NOT to get unlisted quizzes on the main page (i'm guessing they will be objects by the time they get to the front end? if so shouldn't be too hard)

- Stéphane
