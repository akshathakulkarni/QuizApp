This file contains the notes that we (Stéphane and Akshatha, the developers) have taken for this project.

Oct. 21:
I have written each quiz's link as a 6-character alphanumeric string, like in Tinyapp. That way we can take the generateRandomString function from Tinyapp and put it in the form for creating a new quiz, when the time comes to do so.
Perhaps the next step after we've established our database is to make a homepage with some hardcoded dummy elements for quizzes. We'll want a nice header to go in every page as well, i imagine that can be an EJS file?
- Stéphane

Oct. 22:
Here are some functions i've drafted for the SQL queries we'll need. Variables are obviously subject to change depending on what we end up defining in other places.

****

const makeNewQuiz = function(data, user) {
  const title = data.title;
  const unlisted = data.unlisted;
  const userID = user.id;
  const link = generateRandomString();
  return pool
  .query(`INSERT INTO quizzes (title, author_id, unlisted, link) VALUES ($1, $2, $3, $4) RETURNING *`,
  [title, userID, unlisted, link])
  .catch(e => console.log(e));
}

const makeNewQuestion = function(data) {
  const quizID = data.quiz_id;
  const query = data.query;
  const correct = data.correct;
  const wrong1 = data.wrong1;
  const wrong2 = data.wrong2;
  const wrong3 = data.wrong3;
  const queryParams = [quizID, query, correct, wrong1, wrong2, wrong3];
  const queryString = `INSERT INTO questions (quiz_id, query, correct_answer, wrong_1, wrong_2, wrong_3) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *;`;
  return pool.query(queryString, queryParams)
  .then((res) => {
    const questionID = res.questions.id; //or whatever this ends up being
    return pool.query(`INSERT INTO quizzes_questions (quiz_id, question_id) VALUES ($1, $2) RETURNING *;`,
    [quizID, questionID])
    .catch(e => console.log(e));
  })
}

const checkAnswer = function(ans) {
  const query = ans.query;
  const answer = ans.answer;
  const queryString = `SELECT COUNT(*) FROM questions WHERE query = $1 AND correct_answer = $2`;
  return pool.query(queryString, [query, answer])
  .then(res => {
    if (res.number === 1) { // or whatever this is
      return true;
    }
    return false;
  })
  .catch(e => console.log(e));
}

const recordAttempt = function(data) {
  const userID = data.user_id;
  const quizID = data.quiz_id;
  const score = data.score;
  const link = generateRandomString();
  const queryString = `INSERT INTO attempts (user_id, quiz_id, score, link) VALUES ($1, $2, $3, $4) RETURNING *;`;
  const queryParams = [userID, quizID, score, link];
  return pool.query(queryString, queryParams).catch(e => console.log(e));
}

*****

- Stéphane

Oct 22

In 'routes' branch: I have added the login feature and the header which is an ejs file under views/partials only for home page, where we can see the 'Create new quiz', 'My quiz' 'Logged in as : user's name' and a 'logout' button.
Once the user logs out, we can only see the Login which when clicked redirects to the login page.

Oct 23

In 'addNewQuiz' branch: I have added a post route for 'Create new quiz'. Used the above 'makeNewQuiz' and 'makeNewQuestion' functions to test if the data is inserted to db. We need to activate
the click handlers for the 'Add another question' and 'I would like this quiz to be unlisted' so that we can check the whole functionality of Create new quiz.
I have installed and used cookie-session to get the author_id. The final response for now is in json. Need to decide if we want to redirect to public quizzes(home page) or myQuiz page or allow the user to view the quiz that they created (new ejs ?).
We also need to discuss how we should modularize route files.

My quiz

In 'myQuiz' branch: Handled a get route to collect all quizzes based on author_id. I have installed and used cookie-session to get the author_id. We need to have a new ejs file
to display all quizzes based on id.


Few ideas :

1. Evaluating the results : (Attempt to randamize the correct answer among 4)
   Can we change the questions table in db to have answer 1, 2, 3, 4 instead of correct answer and 3 wrong answer? Then include a correct answer column in quizzes_questions table
   from where we can select quiz id , question id and correct answer, get the selected answer from 4 options, have a function to compare selected answer with correct answer
   and increment a counter if comparison holds true. Then we can get the counter value over total number of questions for results. But this way, the user can remember
   that for q1 the correct answer is option__ if he tries to attempt quiz multiple times (Like our compass quiz). If we don't want this to happen then we need to randamize
   all 4 answers each time the user attempts the quiz. Not sure how complex and time consuming this might get.

2. Sharing links for quizzes and answers : Add a share icon below each quiz and results. When clicked, this can take us to a new page where it shows the link
   that will display the whole link and say "Use this link to share" and the user copies and share it. Or we can implement `copied to clipboard` like gitHub and the
   user understands he can directly send it. Again not sure how complex this might be. Keeping MVP in mind, its always better if we keep it as simple as possible.


To do :

1. CSS style : We need to have a simple yet attractive background for the home page. Background can be the same for all other pages.
   Or we can have a similar but different backgrounds based on what we want to display.

2. Update the index, dummyquiz and dummyattempt ejs files to use actual data.

3. Implement 'Take the quiz' and evaluate.

4. Add a new 'View Results' button that redirects to attempts.ejs (recent attempt only).

5. Implement quiz and results 'share' links.

*****

-Akshatha

